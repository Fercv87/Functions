from sklearn.model_selection import KFold
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error  
import numpy as np
import pandas as pd

def k_fold_validation(X, y, k_range, random_state=None):
    results = []

    for k in k_range:
        kf = KFold(n_splits=k, shuffle=True,random_state=random_state)

        cv_scores = []
        mae_scores = []
        rmse_scores = []
        adjusted_r2_scores = []

        for train_index, test_index in kf.split(X):
            X_train, X_test = X.iloc[train_index], X.iloc[test_index]
            y_train, y_test = y.iloc[train_index], y.iloc[test_index]

            model = LinearRegression().fit(X_train, y_train)
            y_pred = model.predict(X_test)

            score = r2_score(y_test, y_pred)
            mae = mean_absolute_error(y_test, y_pred)
            rmse = np.sqrt(mean_squared_error(y_test, y_pred))
            adj_r2 = 1 - (1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)

            cv_scores.append(score)
            mae_scores.append(mae)
            rmse_scores.append(rmse)
            adjusted_r2_scores.append(adj_r2)

        results.append({
            'K': k,
            'Mean R^2': np.mean(cv_scores),
            'Std R^2': np.std(cv_scores),
            'Mean MAE': np.mean(mae_scores),
            'Mean RMSE': np.mean(rmse_scores),
            'Mean Adjusted R^2': np.mean(adjusted_r2_scores)
        })

        print(f"\nK={k}:")
        print(f"Mean R^2 score: {np.mean(cv_scores):.3f}, Std R^2: {np.std(cv_scores):.3f}")
        print(f"Mean MAE: {np.mean(mae_scores):.3f}")
        print(f"Mean RMSE: {np.mean(rmse_scores):.3f}")
        print(f"Mean Adjusted R^2: {np.mean(adjusted_r2_scores):.3f}")

    return pd.DataFrame(results)
